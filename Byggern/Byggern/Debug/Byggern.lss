
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a2  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000062  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000be  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000112  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000088  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:


int main(void)
{
	int i = 1;
	int j = 1;
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
#include "UART.h"


int main(void)
{
	int i = 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
    while(1)
    {
		// Buttons input (the whole port)
		DDRA = 0;
		// Leds output (the whole port)
		DDRB = 0xFF;
  90:	7f ef       	ldi	r23, 0xFF	; 255
  92:	47 2f       	mov	r20, r23
				j = 1;	
			}
			else
			{
				PORTB = 0x00;
				j = 0;
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
		{
			i = 0;
			if (j == 0)
			{
				PORTB = 0xFF;
				j = 1;	
  98:	f1 e0       	ldi	r31, 0x01	; 1
  9a:	e0 e0       	ldi	r30, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x1a>
  9e:	86 2f       	mov	r24, r22
  a0:	95 2f       	mov	r25, r21
	int i = 1;
	int j = 1;
    while(1)
    {
		// Buttons input (the whole port)
		DDRA = 0;
  a2:	1a ba       	out	0x1a, r1	; 26
		// Leds output (the whole port)
		DDRB = 0xFF;
  a4:	47 bb       	out	0x17, r20	; 23
        //TODO:: Please write your application code 
		//fdevopen(char a);
		i++;
  a6:	01 96       	adiw	r24, 0x01	; 1
		if (i >= 1000)
  a8:	88 3e       	cpi	r24, 0xE8	; 232
  aa:	a3 e0       	ldi	r26, 0x03	; 3
  ac:	9a 07       	cpc	r25, r26
  ae:	cc f3       	brlt	.-14     	; 0xa2 <main+0x1a>
		{
			i = 0;
			if (j == 0)
  b0:	23 2b       	or	r18, r19
  b2:	21 f4       	brne	.+8      	; 0xbc <main+0x34>
			{
				PORTB = 0xFF;
  b4:	78 bb       	out	0x18, r23	; 24
				j = 1;	
  b6:	2f 2f       	mov	r18, r31
  b8:	3e 2f       	mov	r19, r30
  ba:	f1 cf       	rjmp	.-30     	; 0x9e <main+0x16>
			}
			else
			{
				PORTB = 0x00;
  bc:	18 ba       	out	0x18, r1	; 24
				j = 0;
  be:	26 2f       	mov	r18, r22
  c0:	35 2f       	mov	r19, r21
  c2:	ed cf       	rjmp	.-38     	; 0x9e <main+0x16>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
